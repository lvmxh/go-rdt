Design
1. interface
All the plugin should follow the interface "algorithm" in sample_test.go.

2. data passed from rdtagent to it's plugin.
There are some convention data structures between this sample and rdtagent in
the sample internal import path.
In real algorithm case, we should move it to rdtagent import path.
such as some data structure:
A. workload.
    RDTWorkLoad defined in internal/workload/workload.go
    RDTWorkLoad should strictly follow the convention.
    The RDTWorkLoad will pass to it's driver(RESCTRL or pqos), so they are
    fixed structure.
B. policy
    policy just is a string type.
    It is flexible. For different developer will define different policy.
    So the policy and it's algorithm are diversity.
    The plugin algorithm will parser the policy by it's self.
    The example should how to parese json string policy.
C. config
    Rdtagent will pass config to it's
D. others
    Rdtagent maybe extend other data structure that we don't consider
    at present.
maybe all these data can be include in a overall context data structure.
We should also refine this structure while we improve our algorithm function.

3. Configure
Rdtagent should support config file.
For plugin, it should specify the location of the plugin executable file.
At peresent, for this sample, we put it in the same path of the plugin
source file.

Run:
1. Build the plugin
    $ ./build.sh
2. Run example test case
    $ go test -v
